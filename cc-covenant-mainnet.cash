pragma cashscript ^0.7.2;

contract CCCovenant(bytes20 monitorPubkeysHash,
                    bytes20 operatorPubkeysHash) {

    function redeemOrConvert(
            sig sig0, sig sig1, sig sig2, sig sig3, sig sig4, sig sig5, sig sig6,
            pubkey op0, pubkey op1, pubkey op2, pubkey op3, pubkey op4,
            pubkey op5, pubkey op6, pubkey op7, pubkey op8, pubkey op9,
            bool isRedeem
    ) {
        require(hash160(op0+op1+op2+op3+op4+op5+op6+op7+op8+op9) == operatorPubkeysHash);
        require(checkMultiSig([sig0, sig1, sig2, sig3, sig4, sig5, sig6], 
            [op0, op1, op2, op3, op4, op5, op6, op7, op8, op9]));

        if (isRedeem) {
            require(tx.inputs.length == 1);
            require(tx.outputs.length == 1);
            require(tx.inputs[0].value == tx.outputs[0].value - 1000); // miner fee is hardcoded
        } else { // convertByOperators
            require(this.activeInputIndex == 0);
            require(tx.inputs[0].value == tx.outputs[0].value);

            // logic = bytecode - constructor params
            bytes oldLogic = this.activeBytecode.split(42)[1];
            bytes newLogic = tx.outputs[0].lockingBytecode.split(42)[1];
            require(oldLogic == newLogic);
        }
    }

    function convertByMonitors(
            sig sig0, sig sig1,
            pubkey m0, pubkey m1, pubkey m2
    ) {
        require(hash160(m0+m1+m2) == monitorPubkeysHash);
        require(checkMultiSig([sig0, sig1], [m0, m1, m2]));

        require(this.activeInputIndex == 0);
        require(tx.inputs[0].value == tx.outputs[0].value);
        require(tx.age >= 25920); // 6 * 24 * 180

        // logic = bytecode - operatorPubkeysHash
        bytes oldLogic = this.activeBytecode.split(21)[1];
        bytes newLogic = tx.outputs[0].lockingBytecode.split(21)[1];
        require(oldLogic == newLogic);
    }

}
